###
# summary: Creates a conversation (can only be done by a caseworker)
# requestBody:
#   description: A JSON object to create a new conversation
#   required: true
#   content:
#    application/json:
#      schema:
#        $ref: '#/components/schemas/uk.gov.hmrc.securemessage.controllers.model.cdcm.write.CdcmConversation'
# responses:
#   201:
#     description: conversation created successfully
#   400:
#     description: bad request such as an invalid payload
#   404:
#     description: required resource not found - e.g. client not recognised or email not found
#   409:
#     description: duplicate - a conversation already exists for this client and conversationId
#   415:
#     description: unsupported media type - should be application/json
#   424:
#     description: a dependency failed - e.g. customer email validation failed
###
PUT         /conversation/:client/:conversationId   uk.gov.hmrc.securemessage.controllers.SecureMessageController.createConversation(client: ClientName, conversationId: String)

###
# summary: Adds a message from a caseworker to a conversation
# requestBody:
#   description: A JSON object to create a new caseworker message
#   required: true
#   content:
#    application/json:
#      schema:
#        $ref: '#/components/schemas/uk.gov.hmrc.securemessage.controllers.model.cdcm.write.CaseworkerMessage'
# responses:
#   201:
#     description: message created successfully
#   400:
#     description: bad request such as an invalid payload
#   404:
#     description: required resource not found - e.g. client not recognised or conversation not found
#   415:
#     description: unsupported media type - should be application/json
#   424:
#     description: a dependency failed - e.g. client not recognised
###
POST        /conversation/:client/:conversationId/caseworker-message    uk.gov.hmrc.securemessage.controllers.SecureMessageController.addCaseworkerMessage(client: ClientName, conversationId: String)

###
# summary: Adds a message from a customer to a conversation
# security:
#   - bearerToken: []
# requestBody:
#   description: A JSON object to create a new customer message
#   required: true
#   content:
#    application/json:
#      schema:
#        $ref: '#/components/schemas/uk.gov.hmrc.securemessage.controllers.model.common.write.CustomerMessage'
# responses:
#   201:
#     description: message created successfully
#   400:
#     description: bad request such as invalid payload or conversation ID not recognised
#   401:
#     description: user is not authorised to add a message
#   404:
#     description: client or conversation ID not recognised
#   502:
#     description: failed to forward message
###
POST        /messages/:encodedId/customer-message  uk.gov.hmrc.securemessage.controllers.SecureMessageController.addCustomerMessage(encodedId: String)

###
# summary: Gets a list of messages via enrolmentKeys, enrolments and tags filters
# security:
#   - bearerToken: []
# responses:
#   200:
#     description: list of messages
#   401:
#     description: unauthorised customer when they don't have an enrolment
###
GET         /messages  uk.gov.hmrc.securemessage.controllers.SecureMessageController.getMessages(enrolmentKey: Option[List[String]], enrolment: Option[List[CustomerEnrolment]], tag: Option[List[FilterTag]], messageFilter: Option[uk.gov.hmrc.securemessage.models.core.MessageFilter], language: Option[uk.gov.hmrc.securemessage.models.core.Language])

###
# summary: Gets inbox counts by filter
# security:
#   - bearerToken: []
# responses:
#   200:
#     description: count returned
#   401:
#     description: unauthorised customer when they don't have an enrolment
###
GET        /messages/count   uk.gov.hmrc.securemessage.controllers.SecureMessageController.getMessagesCount(enrolmentKey: Option[List[String]], enrolment: Option[List[CustomerEnrolment]], tag: Option[List[FilterTag]], messageFilter: Option[uk.gov.hmrc.securemessage.models.core.MessageFilter])

###
# summary: Gets conversation/message by id
# security:
#   - bearerToken: []
# responses:
#   200:
#     description: conversation/message was received
#   401:
#     description: unauthorised customer when they don't have an enrolment
#   404:
#     description: conversation/message not found
###
GET        /messages/:encodedId   uk.gov.hmrc.securemessage.controllers.SecureMessageController.getMessage(encodedId: String, language: Option[uk.gov.hmrc.securemessage.models.core.Language])
###
# summary: Create a new version4 message
# requestBody:
#   description: A JSON object to create a new message
#   required: true
#   content:
#    application/json:
# responses:
#   201:
#     description: message created successfully
#   400:
#     description: bad request such as an invalid payload
###
POST        /v4/message    uk.gov.hmrc.securemessage.controllers.SecureMessageController.createMessage()

GET     /messages/:id/content                           uk.gov.hmrc.securemessage.controllers.SecureMessageController.getContentBy(id: org.mongodb.scala.bson.ObjectId)

POST    /messages/:id/read-time                         uk.gov.hmrc.securemessage.controllers.SecureMessageController.setReadTime(id: org.mongodb.scala.bson.ObjectId)

#Admin endpoints
GET     /admin/message/brake/gmc/batches                uk.gov.hmrc.securemessage.controllers.AdminController.getGMCBrakeBatches()
POST    /admin/message/brake/accept                     uk.gov.hmrc.securemessage.controllers.AdminController.acceptBrakeBatch()
POST    /admin/message/brake/reject                     uk.gov.hmrc.securemessage.controllers.AdminController.rejectBrakeBatch()
POST    /admin/message/brake/random                     uk.gov.hmrc.securemessage.controllers.AdminController.randomBrakeBatchMessage()

GET     /testquery                                       uk.gov.hmrc.securemessage.controllers.AdminController.getMessage